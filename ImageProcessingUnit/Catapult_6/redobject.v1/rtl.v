// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   apl115@EEWS104A-017
//  Generated date: Tue May 10 14:05:01 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    redobject_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module redobject_core_fsm (
  clk, rst, fsm_output
);
  input clk;
  input rst;
  output [1:0] fsm_output;
  reg [1:0] fsm_output;


  // FSM State Type Declaration for redobject_core_fsm_1
  parameter
    st_main = 1'd0,
    st_main_1 = 1'd1,
    state_x = 1'b0;

  reg [0:0] state_var;
  reg [0:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : redobject_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 2'b1;
        state_var_NS = st_main_1;
      end
      st_main_1 : begin
        fsm_output = 2'b10;
        state_var_NS = st_main;
      end
      default : begin
        fsm_output = 2'b00;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= st_main;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    redobject_core
// ------------------------------------------------------------------


module redobject_core (
  clk, rst, VGA_VS_rsc_mgc_in_wire_d, vga_xy_rsc_mgc_in_wire_d, video_in_rsc_mgc_in_wire_d,
      player1y_rsc_mgc_out_stdreg_d
);
  input clk;
  input rst;
  input VGA_VS_rsc_mgc_in_wire_d;
  input [19:0] vga_xy_rsc_mgc_in_wire_d;
  input [29:0] video_in_rsc_mgc_in_wire_d;
  output [9:0] player1y_rsc_mgc_out_stdreg_d;
  reg [9:0] player1y_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [1:0] fsm_output;
  reg findpixelred_sva;
  reg [9:0] redobjy_sva;
  wire findpixelred_sva_dfm;
  wire nor_cse;
  wire [10:0] aif_1_acc_itm;
  wire [11:0] nl_aif_1_acc_itm;
  wire [10:0] aif_acc_itm;
  wire [11:0] nl_aif_acc_itm;
  wire [6:0] if_1_acc_itm;
  wire [7:0] nl_if_1_acc_itm;
  wire [9:0] vga_y_sva;
  wire [10:0] nl_vga_y_sva;


  // Interconnect Declarations for Component Instantiations 
  redobject_core_fsm redobject_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output)
    );
  assign nor_cse = ~((if_1_acc_itm[6]) | (aif_acc_itm[10]) | (aif_1_acc_itm[10]));
  assign nl_vga_y_sva = (vga_xy_rsc_mgc_in_wire_d[19:10]) + 10'b1111011101;
  assign vga_y_sva = nl_vga_y_sva[9:0];
  assign findpixelred_sva_dfm = findpixelred_sva | VGA_VS_rsc_mgc_in_wire_d;
  assign nl_aif_1_acc_itm = ({1'b1 , (~ (video_in_rsc_mgc_in_wire_d[9:0]))}) + 11'b110111001;
  assign aif_1_acc_itm = nl_aif_1_acc_itm[10:0];
  assign nl_aif_acc_itm = ({1'b1 , (~ (video_in_rsc_mgc_in_wire_d[19:10]))}) + 11'b1000001001;
  assign aif_acc_itm = nl_aif_acc_itm[10:0];
  assign nl_if_1_acc_itm = conv_u2u_6_7(video_in_rsc_mgc_in_wire_d[29:24]) + 7'b1001001;
  assign if_1_acc_itm = nl_if_1_acc_itm[6:0];
  always @(posedge clk) begin
    if ( rst ) begin
      player1y_rsc_mgc_out_stdreg_d <= 10'b0;
      redobjy_sva <= 10'b0;
      findpixelred_sva <= 1'b0;
    end
    else begin
      player1y_rsc_mgc_out_stdreg_d <= MUX1HOT_v_10_3_2({vga_y_sva , redobjy_sva
          , player1y_rsc_mgc_out_stdreg_d}, {(nor_cse & findpixelred_sva_dfm & (fsm_output[0]))
          , (nor_cse & (fsm_output[0]) & (~ findpixelred_sva) & (~ VGA_VS_rsc_mgc_in_wire_d))
          , ((if_1_acc_itm[6]) | (aif_acc_itm[10]) | (aif_1_acc_itm[10]) | (~ (fsm_output[0])))});
      redobjy_sva <= MUX_v_10_2_2({vga_y_sva , redobjy_sva}, (~(findpixelred_sva
          | VGA_VS_rsc_mgc_in_wire_d | (fsm_output[1]))) | (fsm_output[1]));
      findpixelred_sva <= MUX_s_1_2_2({findpixelred_sva , (findpixelred_sva_dfm &
          ((aif_1_acc_itm[10]) | (aif_acc_itm[10]) | (if_1_acc_itm[6])))}, fsm_output[0]);
    end
  end

  function [9:0] MUX1HOT_v_10_3_2;
    input [29:0] inputs;
    input [2:0] sel;
    reg [9:0] result;
    integer i;
  begin
    result = inputs[0+:10] & {10{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*10+:10] & {10{sel[i]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    redobject
//  Generated from file(s):
//    2) $PROJECT_HOME/vga_mouse_square.c
// ------------------------------------------------------------------


module redobject (
  VGA_VS_rsc_z, vga_xy_rsc_z, video_in_rsc_z, player1y_rsc_z, clk, rst
);
  input VGA_VS_rsc_z;
  input [19:0] vga_xy_rsc_z;
  input [29:0] video_in_rsc_z;
  output [9:0] player1y_rsc_z;
  input clk;
  input rst;


  // Interconnect Declarations
  wire VGA_VS_rsc_mgc_in_wire_d;
  wire [19:0] vga_xy_rsc_mgc_in_wire_d;
  wire [29:0] video_in_rsc_mgc_in_wire_d;
  wire [9:0] player1y_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(1)) VGA_VS_rsc_mgc_in_wire (
      .d(VGA_VS_rsc_mgc_in_wire_d),
      .z(VGA_VS_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(20)) vga_xy_rsc_mgc_in_wire (
      .d(vga_xy_rsc_mgc_in_wire_d),
      .z(vga_xy_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(30)) video_in_rsc_mgc_in_wire (
      .d(video_in_rsc_mgc_in_wire_d),
      .z(video_in_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(10)) player1y_rsc_mgc_out_stdreg (
      .d(player1y_rsc_mgc_out_stdreg_d),
      .z(player1y_rsc_z)
    );
  redobject_core redobject_core_inst (
      .clk(clk),
      .rst(rst),
      .VGA_VS_rsc_mgc_in_wire_d(VGA_VS_rsc_mgc_in_wire_d),
      .vga_xy_rsc_mgc_in_wire_d(vga_xy_rsc_mgc_in_wire_d),
      .video_in_rsc_mgc_in_wire_d(video_in_rsc_mgc_in_wire_d),
      .player1y_rsc_mgc_out_stdreg_d(player1y_rsc_mgc_out_stdreg_d)
    );
endmodule



