// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   apl115@EEWS104A-017
//  Generated date: Tue May 10 14:04:57 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    redobject_core
// ------------------------------------------------------------------


module redobject_core (
  clk, rst, VGA_VS_rsc_mgc_in_wire_d, vga_xy_rsc_mgc_in_wire_d, video_in_rsc_mgc_in_wire_d,
      player1y_rsc_mgc_out_stdreg_d
);
  input clk;
  input rst;
  input VGA_VS_rsc_mgc_in_wire_d;
  input [19:0] vga_xy_rsc_mgc_in_wire_d;
  input [29:0] video_in_rsc_mgc_in_wire_d;
  output [9:0] player1y_rsc_mgc_out_stdreg_d;
  reg [9:0] player1y_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg findpixelred_sva;
    reg [9:0] redobjy_sva;
    reg [29:0] io_read_video_in_rsc_d_cse_sva;
    reg [9:0] vga_y_sva;
    reg findpixelred_sva_dfm;
    reg slc_svs;
    reg land_1_sva_1;
    reg land_1_lpi_1_dfm;
    reg land_sva_1;
    reg land_lpi_1_dfm;

    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        findpixelred_sva = 1'b0;
        redobjy_sva = 10'b0;
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            begin : waitLoop0Exit
              forever begin : waitLoop0
                @(posedge clk);
                if ( rst )
                  disable core_rlpExit;
                if ( clk )
                  disable waitLoop0Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            land_sva_1 = 1'b0;
            land_1_sva_1 = 1'b0;
            io_read_video_in_rsc_d_cse_sva = video_in_rsc_mgc_in_wire_d;
            vga_y_sva = (vga_xy_rsc_mgc_in_wire_d[19:10]) + 10'b1111011101;
            findpixelred_sva_dfm = findpixelred_sva | VGA_VS_rsc_mgc_in_wire_d;
            slc_svs = readslicef_7_1_6((conv_u2u_6_7(io_read_video_in_rsc_d_cse_sva[29:24])
                + 7'b1001001));
            if ( slc_svs ) begin
            end
            else begin
              land_1_sva_1 = ~ (readslicef_11_1_10((({1'b1 , (~ (io_read_video_in_rsc_d_cse_sva[19:10]))})
                  + 11'b1000001001)));
            end
            land_1_lpi_1_dfm = land_1_sva_1 & (~ slc_svs);
            if ( land_1_lpi_1_dfm ) begin
              land_sva_1 = ~ (readslicef_11_1_10((({1'b1 , (~ (io_read_video_in_rsc_d_cse_sva[9:0]))})
                  + 11'b110111001)));
            end
            land_lpi_1_dfm = land_sva_1 & land_1_lpi_1_dfm;
            if ( land_lpi_1_dfm ) begin
              player1y_rsc_mgc_out_stdreg_d <= MUX_v_10_2_2({redobjy_sva , vga_y_sva},
                  findpixelred_sva_dfm);
            end
            findpixelred_sva = findpixelred_sva_dfm & (~ land_lpi_1_dfm);
            redobjy_sva = MUX_v_10_2_2({redobjy_sva , vga_y_sva}, findpixelred_sva_dfm
                & land_lpi_1_dfm);
            begin : waitLoop1Exit
              forever begin : waitLoop1
                @(posedge clk);
                if ( rst )
                  disable core_rlpExit;
                if ( clk )
                  disable waitLoop1Exit;
              end
            end
            // C-Step 2 of Loop 'main'
          end
        end
      end
    end
    land_lpi_1_dfm = 1'b0;
    land_sva_1 = 1'b0;
    land_1_lpi_1_dfm = 1'b0;
    land_1_sva_1 = 1'b0;
    slc_svs = 1'b0;
    findpixelred_sva_dfm = 1'b0;
    vga_y_sva = 10'b0;
    io_read_video_in_rsc_d_cse_sva = 30'b0;
    redobjy_sva = 10'b0;
    findpixelred_sva = 1'b0;
    player1y_rsc_mgc_out_stdreg_d <= 10'b0;
  end


  function [0:0] readslicef_7_1_6;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_7_1_6 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    redobject
//  Generated from file(s):
//    2) $PROJECT_HOME/vga_mouse_square.c
// ------------------------------------------------------------------


module redobject (
  VGA_VS_rsc_z, vga_xy_rsc_z, video_in_rsc_z, player1y_rsc_z, clk, rst
);
  input VGA_VS_rsc_z;
  input [19:0] vga_xy_rsc_z;
  input [29:0] video_in_rsc_z;
  output [9:0] player1y_rsc_z;
  input clk;
  input rst;


  // Interconnect Declarations
  wire VGA_VS_rsc_mgc_in_wire_d;
  wire [19:0] vga_xy_rsc_mgc_in_wire_d;
  wire [29:0] video_in_rsc_mgc_in_wire_d;
  wire [9:0] player1y_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(1)) VGA_VS_rsc_mgc_in_wire (
      .d(VGA_VS_rsc_mgc_in_wire_d),
      .z(VGA_VS_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(20)) vga_xy_rsc_mgc_in_wire (
      .d(vga_xy_rsc_mgc_in_wire_d),
      .z(vga_xy_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(30)) video_in_rsc_mgc_in_wire (
      .d(video_in_rsc_mgc_in_wire_d),
      .z(video_in_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(10)) player1y_rsc_mgc_out_stdreg (
      .d(player1y_rsc_mgc_out_stdreg_d),
      .z(player1y_rsc_z)
    );
  redobject_core redobject_core_inst (
      .clk(clk),
      .rst(rst),
      .VGA_VS_rsc_mgc_in_wire_d(VGA_VS_rsc_mgc_in_wire_d),
      .vga_xy_rsc_mgc_in_wire_d(vga_xy_rsc_mgc_in_wire_d),
      .video_in_rsc_mgc_in_wire_d(video_in_rsc_mgc_in_wire_d),
      .player1y_rsc_mgc_out_stdreg_d(player1y_rsc_mgc_out_stdreg_d)
    );
endmodule



